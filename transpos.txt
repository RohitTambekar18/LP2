import java.util.Arrays;
import java.util.Scanner;

class RailFence {
 
    // function to encrypt a message
    public static String encryptRailFence(String text, int key) {
        char[][] rail = new char[key][text.length()];
        
        for (int i = 0; i < key; i++)
            Arrays.fill(rail[i], '\n');
 
        boolean dirDown = false;
        int row = 0, col = 0;
 
        for (int i = 0; i < text.length(); i++) {
           
            if (row == 0 || row == key - 1)
                dirDown = !dirDown;
 
            // fill the corresponding alphabet
            rail[row][col++] = text.charAt(i);
 
            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }
 
        // now we can construct the cipher using the rail matrix
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < key; i++)
            for (int j = 0; j < text.length(); j++)
                if (rail[i][j] != '\n')
                    result.append(rail[i][j]);
 
        return result.toString();
    }
 
    // This function receives cipher-text and key
    // and returns the original text after decryption
    public static String decryptRailFence(String cipher, int key) {
        // create the matrix to cipher plain text
        // key = rows , length(text) = columns
        char[][] rail = new char[key][cipher.length()];
 
        // filling the rail matrix to distinguish filled
        // spaces from blank ones
        for (int i = 0; i < key; i++)
            Arrays.fill(rail[i], '\n');
 
        // to find the direction
        boolean dirDown = true;
 
        int row = 0, col = 0;
 
        // mark the places with '*'
        for (int i = 0; i < cipher.length(); i++) {
            // check the direction of flow
            if (row == 0)
                dirDown = true;
            if (row == key - 1)
                dirDown = false;
 
            // place the marker
            rail[row][col++] = '*';
 
            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }
 
        // now we can construct the fill the rail matrix
        int index = 0;
        for (int i = 0; i < key; i++)
            for (int j = 0; j < cipher.length(); j++)
                if (rail[i][j] == '*' && index < cipher.length())
                    rail[i][j] = cipher.charAt(index++);
 
        StringBuilder result = new StringBuilder();
 
        row = 0;
        col = 0;
        for (int i = 0; i < cipher.length(); i++) {
            // check the direction of flow
            if (row == 0)
                dirDown = true;
            if (row == key - 1)
                dirDown = false;
 
            // place the marker
            if (rail[row][col] != '*')
                result.append(rail[row][col++]);
 
            // find the next row using direction flag
            if (dirDown)
                row++;
            else
                row--;
        }
        return result.toString();
    }
 
    // driver program to check the above functions
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Encryption
        System.out.println("Enter the plaintext message: ");
        String plainText = scanner.nextLine();
        System.out.println("Enter the number of rails: ");
        int railCount = scanner.nextInt();
        scanner.nextLine(); // Consume newline character

        String encryptedMessage = encryptRailFence(plainText, railCount);
        System.out.println("Encrypted Message: " + encryptedMessage);

        // Decryption
        System.out.println("Enter the cipher text: ");
        String cipherText = scanner.nextLine();
        System.out.println("Enter the number of rails: ");
        railCount = scanner.nextInt();
        scanner.nextLine(); // Consume newline character

        String decryptedMessage = decryptRailFence(cipherText, railCount);
        System.out.println("Decrypted Message: " + decryptedMessage);

        scanner.close();
    }
}

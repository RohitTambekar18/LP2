#include<iostream>
#include<list>
#include<map>
#include<queue>

using namespace std;

class Graph{
public:
    map<int, list<int>> adjList;
    map<int, bool> visited;
    queue<int> q;
    
    void addEdge(int src, int dest){
        adjList[src].push_back(dest);
        adjList[dest].push_back(src);
    }

    void DFS(int node){
        visited[node] = true;
        cout << node << " ";
        for(int i : adjList[node]){
            if(!visited[i])
                DFS(i);
        }
    }

    void BFS(){
        if(q.empty()) return;
        int node = q.front();
        q.pop();
        cout << node << " ";
        for(int i : adjList[node]){
            if(!visited[i]){
                visited[i] = true;
                q.push(i);
            }
        }
        BFS();
    }

    void takeInput() {
        int vertices, edges;
        cout << "Enter the number of vertices: ";
        cin >> vertices;
        cout << "Enter the number of edges: ";
        cin >> edges;
        
        cout << "Enter the connections (edge u to v):\n";
        for (int i = 0; i < edges; i++) {
            int u, v;
            cin >> u >> v;
            addEdge(u, v);
        }
    }
};

int main(){
    Graph g;
    g.takeInput();
    
    int ch;
    cout << "Enter 0 to perform DFS and 1 to perform BFS: ";
    cin >> ch;
    
    if (!ch){
        cout << "DFS on the given graph is: ";
        g.DFS(0);
    }
    else{
        cout << "BFS on the given graph is: ";
        g.q.push(0);
        g.visited[0] = true;
        g.BFS();
    }
    
    return 0;
}

